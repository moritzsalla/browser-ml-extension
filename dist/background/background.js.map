{"version":3,"sources":["background/sensehat.ts","background/background.ts"],"names":[],"mappings":";AAiCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjCA,IAAA,EAAA,WAIE,SAAA,EAAY,EAAiB,GACtB,KAAA,QAAU,EACV,KAAA,SAAW,EAAS,QAAU,OAyBvC,OAtBE,EAAA,UAAA,SAAA,SAAS,EAAW,EAAW,GACzB,IAAA,EAAO,IAAI,eACf,EAAK,KACH,MACG,KAAK,SAAQ,MAAM,KAAK,QAAO,YAAY,KAAK,MACjD,GACD,MAAM,KAAK,MAAM,GAAE,MAAM,KAAK,MAAM,IAEvC,EAAK,QAGP,EAAA,UAAA,MAAA,WACM,IAAA,EAAO,IAAI,eACf,EAAK,KAAK,MAAU,KAAK,SAAQ,MAAM,KAAK,QAAO,UACnD,EAAK,QAGP,EAAA,UAAA,KAAA,WACM,IAAA,EAAO,IAAI,eACf,EAAK,KAAK,MAAU,KAAK,SAAQ,MAAM,KAAK,QAAO,SACnD,EAAK,QAET,EA/BA,GAiCA,QAAA,QAAe;;ACgCd,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjED,IAAA,EAAA,EAAA,QAAA,2BAEA,OAAO,QAAQ,YAAY,YAAY,WACrC,OAAO,mBAAmB,cAAc,iBAAY,EAAW,WAC7D,OAAO,mBAAmB,cAAc,SAAS,CAC/C,CACE,WAAY,CACV,IAAI,OAAO,mBAAmB,iBAAiB,CAC7C,QAAS,CAEP,QAAS,CAAC,OAAQ,aAIxB,QAAS,CAAC,IAAI,OAAO,mBAAmB,uBAMhD,IAAM,EAAQ,IAAI,EAAA,QAAS,gBAAgB,GAIvC,EAAI,EACJ,EAAS,GAgCb,SAAS,EACP,EACA,EACA,EACA,EACA,GAEO,OAAA,GAA8B,EAAQ,IAAW,EAAQ,IAA/C,EAAQ,GArC3B,YAAY,WACV,OAAO,QAAQ,MAAM,IAAI,CAAC,SAAU,SAAC,GAC/B,GAAA,EAAO,MAAM,cAAgB,MAAO,CAClC,IAAA,EAAM,EAAO,MAAM,EAAO,MAAM,OAAS,GAI7C,IADW,EAAM,GACL,EAGR,IAAA,EAAQ,KAAK,MAAM,EAAI,EAAG,EAAG,EAAG,EAAG,MAEvC,QAAQ,IAAI,CACV,IAAK,EACL,EAAG,EACH,YAAa,IAGX,IACF,EAAM,SAAS,EAAO,EAAG,GACzB,MAAO,GACP,QAAQ,MAAM,GACd,QAAQ,MACN,oFAKP","file":"background.js","sourceRoot":"../src","sourcesContent":["class SenseHat {\n  address: string;\n  protocol: string;\n\n  constructor(address: string, secure: boolean) {\n    this.address = address;\n    this.protocol = secure ? \"https\" : \"http\";\n  }\n\n  setColor(r: number, g: number, b: number) {\n    let http = new XMLHttpRequest();\n    http.open(\n      \"GET\",\n      `${this.protocol}://${this.address}/color?r=${Math.round(\n        r\n      )}&g=${Math.round(g)}&b=${Math.round(b)}`\n    );\n    http.send();\n  }\n\n  clear() {\n    let http = new XMLHttpRequest();\n    http.open(\"GET\", `${this.protocol}://${this.address}/clear`);\n    http.send();\n  }\n\n  test() {\n    let http = new XMLHttpRequest();\n    http.open(\"GET\", `${this.protocol}://${this.address}/test`);\n    http.send();\n  }\n}\n\nexport default SenseHat;\n","import SenseHat from \"../background/sensehat\";\n\nchrome.runtime.onInstalled.addListener(function () {\n  chrome.declarativeContent.onPageChanged.removeRules(undefined, function () {\n    chrome.declarativeContent.onPageChanged.addRules([\n      {\n        conditions: [\n          new chrome.declarativeContent.PageStateMatcher({\n            pageUrl: {\n              // hostEquals:\n              schemes: [\"http\", \"https\"],\n            },\n          }),\n        ],\n        actions: [new chrome.declarativeContent.ShowPageAction()],\n      },\n    ]);\n  });\n});\n\nconst Sense = new SenseHat(\"192.168.0.24\", true);\n\n// init animation loop and do smth with sensehat\n\nlet x = 1;\nlet easing = 0.1;\n\nsetInterval(function () {\n  chrome.storage.local.get([\"score\"], (result) => {\n    if (result.score.constructor === Array) {\n      let val = result.score[result.score.length - 1];\n\n      // ease\n      let dist = val - x;\n      x += dist * easing;\n\n      // map to rgb range\n      let normX = Math.round(map(x, 0, 1, 0, 255));\n\n      console.log({\n        val: val,\n        x: x,\n        normalizedX: normX,\n      });\n\n      try {\n        Sense.setColor(normX, 0, normX);\n      } catch (err) {\n        console.error(err);\n        console.error(\n          \"Make sure you are sending integers not floats, in a range between 0 and 255\"\n        );\n      }\n    }\n  });\n}, 400);\n\nfunction map(\n  value: number,\n  start1: number,\n  stop1: number,\n  start2: number,\n  stop2: number\n): number {\n  return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n}\n"]}